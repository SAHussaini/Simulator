#BlueJ class context
comment0.target=Controller
comment0.text=\r\n\ This\ is\ the\ Controller\ class.\ \r\n\ It\ creates\ a\ domain\ instance\ and\ handles\ all\ the\ logic\ behind\ the\ simulation.\ \r\n\ It\ does\ this\ by\ manipulating\ the\ other\ classes\ and\ via\ specialised\ methods\ to\ execute\ the\ simulation.\r\n\r\n\ @author\ (Syed\ Hussaini)\r\n
comment1.params=marketCap
comment1.target=Controller(int)
comment1.text=\r\n\ Create\ a\ Controller\ object.\ \r\n\ This\ also\ instantiates\ all\ instance\ variables\ to\ default\ values\ and\ creates\ a\ supermarket\ with\ the\ given\ capacity.\r\n\ Additionally,\ we\ hardcode\ our\ entry\ regulations\ in\ this\ constructor\ and\ parse\ them\ as\ entry\ regulations\ into\ our\ entry\ regulations\ map\ as\ well.\r\n\ \r\n\ @param\ marketCap\ The\ maximum\ capacity\ for\ this\ controller's\ supermarket\ object.\r\n
comment10.params=
comment10.target=void\ moveTimestep()
comment10.text=\r\n\ Increment\ the\ current\ time\ and\ decrement\ the\ life\ value\ of\ all\ customers\ currently\ within\ the\ supermarket.\r\n\ The\ time\ is\ in\ a\ 24-hour\ format\ and\ goes\ from\ 0\ -\ 23\ (inclusive)\r\n
comment11.params=timeBound
comment11.target=void\ addToTimebounds(Controller.Tuple)
comment11.text=\r\n\ THE\ FOLLOWING\ METHODS\ WERE\ USED\ DURING\ THE\ TESTING\ PHASE\ AND\ SHOULD\ BE\ REMOVED\ BEFORE\ RELEASE\!\r\n
comment12.params=age
comment12.target=void\ addToAllowedAges(java.lang.String)
comment13.params=customer
comment13.target=void\ addToQueue(Customer)
comment14.params=customer
comment14.target=void\ addToShop(Customer)
comment15.params=
comment15.target=java.util.ArrayList\ getCustomersInQueue()
comment16.params=
comment16.target=java.util.ArrayList\ getCustomersInShop()
comment17.params=
comment17.target=void\ forceEntryRegUpdate()
comment18.params=t
comment18.target=void\ setTime(int)
comment19.params=
comment19.target=int\ getTime()
comment2.params=
comment2.target=void\ simulate()
comment2.text=\r\n\ Simulates\ one\ timestep\ of\ the\ domain's\ simulation.\ \r\n\ It\ uses\ the\ other\ methods\ to\ do\ this\ in\ this\ order\ of\ execution\:\r\n\ \r\n\ 1.\ Exit\ any\ customers\ whose\ time\ in\ the\ supermarket\ is\ up\ (i.e.\ their\ life\ value\ has\ reached\ 0)\r\n\ 2.\ Add\ more\ customers\ to\ the\ line\ of\ customers\ waiting\ outside\ the\ supermarket\r\n\ 3.\ Retrieve\ which\ age\ groups\ are\ allowed\ entry\ into\ the\ supermarket\ for\ the\ current\ time\r\n\ 4.\ Enter\ into\ the\ supermarket\ only\ the\ allowed\ age\ groups\ from\ the\ customers\ waiting\ in\ the\ line\r\n\ 5.\ Move\ to\ the\ next\ time\ frame\r\n\ \r\n\ *NOTE*\ The\ supermarket's\ state\ may\ be\ exported\ to\ a\ CSV\ file\ at\ any\ point\ during\ the\ simulation\ but\ is\ part\ of\ a\ separate\ method\ that\ the\ user\ can\ execute\ at\ will.\r\n
comment20.params=
comment20.target=Supermarket\ getSupermarket()
comment3.params=
comment3.target=void\ updateCustomersInShop()
comment3.text=\r\n\ Remove\ the\ customers\ whose\ time\ in\ the\ supermarket\ is\ up\ from\ the\ supermarket.\r\n\ \r\n\ Note\ to\ self\ and\ to\ reader\:\ there\ is\ one\ flaw\ with\ this\ method;\ if\ there\ are\ no\ customers\ within\ the\ supermarket\ \r\n\ and\ you\ still\ attempt\ to\ update\ the\ customers\ inside\ the\ supermarket\ by\ executing\ this\ method,\ nothing\ happens.\ \r\n\ This\ is\ not\ ideal\ as\ we\ would\ instead\ want\ some\ sort\ of\ an\ error\ message\ printing\ out\ informing\ the\ user\ of\ this\ behaviour\ (for\ usability\ purposes).\r\n\ This\ can\ (and\ should)\ be\ fixed.\ Also,\ since\ this\ method\ is\ an\ internal\ method\ and\ is\ not\ mean\ to\ be\ called\ by\ the\ user,\ this\ issue\ is\ not\ a\ high-priority\ issue.\r\n
comment4.params=
comment4.target=void\ addCustomersToQueue()
comment4.text=\r\n\ Add\ customers\ to\ the\ line\ of\ customers\ that\ are\ waiting\ entry\ into\ the\ supermarket.\r\n\ The\ number\ of\ customers\ added\ is\ pseudorandomised\ and\ can\ be\ any\ number\ between\ 0\ -\ 7\ (inclusive).\r\n
comment5.params=
comment5.target=java.lang.String\ getRandomAge()
comment5.text=\r\n\ Generates\ and\ returns\ a\ pseudorandomised\ age\ group\ (from\ the\ allowed\ age\ groups)\ for\ a\ Customer\ object.\r\n\ \r\n\ @return\ A\ pseudorandomised\ age\ group\ for\ the\ Customer\ object\ from\ the\ age\ groups\ that\ are\ considered\ valid\ for\ the\ Customer\ class.\r\n
comment6.params=
comment6.target=java.lang.String\ getRandomGender()
comment6.text=\r\n\ Generates\ and\ returns\ a\ pseudorandomised\ gender\ (from\ the\ allowed\ genders\ of\ Male/Female)\ for\ a\ Customer\ object.\r\n\ \r\n\ @return\ A\ pseudorandomised\ gender\ for\ the\ Customer\ object.\ This\ can\ either\ be\ "Male"\ or\ "Female".\r\n
comment7.params=
comment7.target=java.util.ArrayList\ getReg()
comment7.text=\r\n\ Find\ the\ age\ groups\ that\ should\ be\ allowed\ entry\ into\ the\ supermarket\ for\ the\ current\ time.\r\n\ \r\n\ @return\ A\ list\ containing\ the\ age\ groups\ that\ are\ allowed\ entry\ into\ the\ supermarket\ for\ the\ current\ time.\r\n
comment8.params=allowedAges
comment8.target=void\ enterCustomersToShop(java.util.ArrayList)
comment8.text=\r\n\ Enter\ the\ given\ ages\ into\ the\ supermarket\ from\ the\ line\ of\ customers\ that\ are\ waiting\ entry\ into\ the\ supermarket.\r\n\ \r\n\ @param\ A\ list\ containing\ the\ age\ groups\ that\ are\ allowed\ entry\ into\ the\ supermarket\ for\ the\ current\ time.\r\n\ \r\n\ *NOTE*\ There\ are\ two\ problems\ with\ this\ method\ and\ one\ of\ them\ is\ major\:\r\n\ \r\n\ 1.\ The\ lesser\ of\ these\ issues\ is\ similar\ to\ the\ issue\ in\ the\ updatCustomersInShop\ method,\ namely,\ in\ the\ instance\r\n\ \ \ \ that\ we\ attempt\ to\ execute\ this\ method\ whilst\ the\ line\ of\ customers\ waiting\ entry\ into\ the\ supermarket\ is\ empty,\ then\r\n\ \ \ \ nothing\ happens.\ This\ is\ not\ correct\ as\ we\ should\ report\ this\ behaviour\ to\ the\ user\ with\ an\ appropriate\ error\ message.\r\n\ 2.\ The\ more\ pertinent\ of\ these\ issues\ is\ when\ we\ attempt\ to\ enter\ customers\ into\ the\ supermarket\ whilst\ the\ supermarket's\ capacity\r\n\ \ \ \ is\ full.\ The\ supermarket\ object\ itself\ would,\ appropriately,\ report\ that\ it\ cannot\ do\ this\ as\ its\ capacity\ is\ full,\ however\r\n\ \ \ \ the\ customer\ is\ STILL\ moved\ to\ our\ list\ of\ customers\ who\ are\ assumed\ to\ be\ INSIDE\ the\ supermarket,\ which\ is\ absolutely\ erronous\!\r\n\ \ \ \ Our\ tests\ did\ not\ pick\ this\ up,\ showing\ the\ importance\ of\ re-reading\ your\ source\ code\ and\ also\ of\ whitebox\ testing.\ \r\n\ \ \ \ In\ any\ case,\ this\ needs\ to\ be\ addressed\!\r\n
comment9.params=
comment9.target=void\ exportState()
comment9.text=\r\n\ Export\ the\ current\ state\ of\ the\ supermarket\ to\ a\ local\ CSV\ file.\ Report\ an\ error\ message\ if\ we\ encounter\ any\ issues\ during\ this\ process.\r\n\ The\ data\ that\ is\ exported\ includes\:\ \r\n\ -\ the\ current\ time\r\n\ -\ the\ number\ of\ Young\ customers\ in\ the\ supermarket\r\n\ -\ the\ number\ of\ Middle\ customers\ in\ the\ supermarket\r\n\ -\ the\ number\ of\ Elder\ customers\ in\ the\ supermarket\r\n\ -\ whether\ or\ not\ the\ supermarket\ is\ full\r\n\ \r\n\ *Note*\ Since\ we\ close\ the\ writer\ within\ this\ method,\ executing\ this\ method\ will\ OVERWRITE\ any\ data\ in\ the\ supermarket_simulation.csv\ file.\r\n\ \ \ \ \ \ \ \ Ideally,\ we\ would\ want\ to\ find\ a\ way\ to\ add\ another\ entry\ into\ the\ CSV\ instead\ of\ overwriting\ the\ previous\ entry.\ \r\n\ \ \ \ \ \ \ \ This\ can\ be\ looked\ into\ for\ future\ improvement.\r\n
numComments=21
